{"ast":null,"code":"/**\n *  PDFObject v2.3.0\n *  https://github.com/pipwerks/PDFObject\n *  @license\n *  Copyright (c) 2008-2024 Philip Hutchison\n *  MIT-style license: http://pipwerks.mit-license.org/\n *  UMD module pattern from https://github.com/umdjs/umd/blob/master/templates/returnExports.js\n */\n\n(function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof module === \"object\" && module.exports) {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.PDFObject = factory();\n  }\n})(this, function () {\n  \"use strict\";\n\n  //PDFObject is designed for client-side (browsers), not server-side (node)\n  //Will choke on undefined navigator and window vars when run on server\n  //Return boolean false and exit function when running server-side\n  if (typeof window === \"undefined\" || window.navigator === undefined || window.navigator.userAgent === undefined) {\n    return false;\n  }\n  let pdfobjectversion = \"2.3.0\";\n  let win = window;\n  let nav = win.navigator;\n  let ua = nav.userAgent;\n  let suppressConsole = false;\n\n  //Fallback validation when navigator.pdfViewerEnabled is not supported\n  let isModernBrowser = function () {\n    /*\n       userAgent sniffing is not the ideal path, but most browsers revoked the ability to check navigator.mimeTypes \n       for security purposes. As of 2023, browsers have begun implementing navigator.pdfViewerEnabled, but older versions\n       do not have navigator.pdfViewerEnabled or the ability to check navigator.mimeTypes. We're left with basic browser \n       sniffing and assumptions of PDF support based on browser vendor.\n    */\n\n    //Chromium has provided native PDF support since 2011.\n    //Most modern browsers use Chromium under the hood: Google Chrome, Microsoft Edge, Opera, Brave, Vivaldi, Arc, and more.\n    //Chromium uses the PDFium rendering engine, which is based on Foxit's PDF rendering engine.\n    //Note that MS Edge opts to use a different PDF rendering engine. As of 2024, Edge uses a version of Adobe's Reader\n    let isChromium = win.chrome !== undefined;\n\n    //Safari on macOS has provided native PDF support since 2009. \n    //This code snippet also detects the DuckDuckGo browser, which uses Safari/Webkit under the hood.\n    let isSafari = win.safari !== undefined || nav.vendor !== undefined && /Apple/.test(nav.vendor) && /Safari/.test(ua);\n\n    //Firefox has provided PDF support via PDFJS since 2013.\n    let isFirefox = win.Mozilla !== undefined || /irefox/.test(ua);\n    return isChromium || isSafari || isFirefox;\n  };\n\n  /*\n     Special handling for Internet Explorer 11.\n     Check for ActiveX support, then whether \"AcroPDF.PDF\" or \"PDF.PdfCtrl\" are valid.\n     IE11 uses ActiveX for Adobe Reader and other PDF plugins, but window.ActiveXObject will evaluate to false. \n     (\"ActiveXObject\" in window) evaluates to true.\n     MS Edge does not support ActiveX so this test will evaluate false for MS Edge.\n  */\n  let validateAX = function (type) {\n    var ax = null;\n    try {\n      ax = new ActiveXObject(type);\n    } catch (e) {\n      //ensure ax remains null when ActiveXObject attempt fails\n      ax = null;\n    }\n    return !!ax; //convert resulting object to boolean\n  };\n  let hasActiveXPDFPlugin = function () {\n    return \"ActiveXObject\" in win && (validateAX(\"AcroPDF.PDF\") || validateAX(\"PDF.PdfCtrl\"));\n  };\n  let checkSupport = function () {\n    //Safari on iPadOS doesn't report as 'mobile' when requesting desktop site, yet still fails to embed PDFs\n    let isSafariIOSDesktopMode = nav.platform !== undefined && nav.platform === \"MacIntel\" && nav.maxTouchPoints !== undefined && nav.maxTouchPoints > 1;\n    let isMobileDevice = isSafariIOSDesktopMode || /Mobi|Tablet|Android|iPad|iPhone/.test(ua);\n\n    //As of June 2023, no mobile browsers properly support inline PDFs. If mobile, just say no.\n    if (isMobileDevice) {\n      return false;\n    }\n\n    //Modern browsers began supporting navigator.pdfViewerEnabled in late 2022 and early 2023.\n    let supportsPDFVE = typeof nav.pdfViewerEnabled === \"boolean\";\n\n    //If browser supports nav.pdfViewerEnabled and is explicitly saying PDFs are NOT supported (e.g. PDFJS disabled by user in Firefox), respect it.\n    if (supportsPDFVE && !nav.pdfViewerEnabled) {\n      return false;\n    }\n    return supportsPDFVE && nav.pdfViewerEnabled || isModernBrowser() || hasActiveXPDFPlugin();\n  };\n\n  //Determines whether PDF support is available\n  let supportsPDFs = checkSupport();\n\n  //Create a fragment identifier for using PDF Open parameters when embedding PDF\n  let buildURLFragmentString = function (pdfParams) {\n    let string = \"\";\n    let prop;\n    let paramArray = [];\n    let fdf = \"\";\n\n    //The comment, viewrect, and highlight parameters require page to be set first. \n\n    //Check to ensure page is used if comment, viewrect, or highlight are specified\n    if (pdfParams.comment || pdfParams.viewrect || pdfParams.highlight) {\n      if (!pdfParams.page) {\n        //If page is not set, use the first page\n        pdfParams.page = 1;\n\n        //Inform user that page needs to be set properly\n        embedError(\"The comment, viewrect, and highlight parameters require a page parameter, but none was specified. Defaulting to page 1.\");\n      }\n    }\n\n    //Let's go ahead and ensure page is always the first parameter.\n    if (pdfParams.page) {\n      paramArray.push(\"page=\" + encodeURIComponent(pdfParams.page));\n      delete pdfParams.page;\n    }\n\n    //FDF needs to be the last parameter in the string\n    if (pdfParams.fdf) {\n      fdf = pdfParams.fdf;\n      delete pdfParams.fdf;\n    }\n\n    //Add all other parameters, as needed\n    if (pdfParams) {\n      for (prop in pdfParams) {\n        if (pdfParams.hasOwnProperty(prop)) {\n          paramArray.push(encodeURIComponent(prop) + \"=\" + encodeURIComponent(pdfParams[prop]));\n        }\n      }\n\n      //Add fdf as the last parameter, if needed\n      if (fdf) {\n        paramArray.push(\"fdf=\" + encodeURIComponent(fdf));\n      }\n\n      //Join all parameters in the array into a string\n      string = paramArray.join(\"&\");\n\n      //The string will be empty if no PDF Parameters were provided\n      //Only prepend the hash if the string is not empty\n      if (string) {\n        string = \"#\" + string;\n      }\n    }\n    return string;\n  };\n  let embedError = function (msg) {\n    if (!suppressConsole) {\n      console.log(\"[PDFObject]\", msg);\n    }\n    return false;\n  };\n  let emptyNodeContents = function (node) {\n    while (node.firstChild) {\n      node.removeChild(node.firstChild);\n    }\n  };\n  let getTargetElement = function (targetSelector) {\n    //Default to body for full-browser PDF\n    let targetNode = document.body;\n\n    //If a targetSelector is specified, check to see whether\n    //it's passing a selector, jQuery object, or an HTML element\n\n    if (typeof targetSelector === \"string\") {\n      //Is CSS selector\n      targetNode = document.querySelector(targetSelector);\n    } else if (win.jQuery !== undefined && targetSelector instanceof jQuery && targetSelector.length) {\n      //Is jQuery element. Extract HTML node\n      targetNode = targetSelector.get(0);\n    } else if (targetSelector.nodeType !== undefined && targetSelector.nodeType === 1) {\n      //Is HTML element\n      targetNode = targetSelector;\n    }\n    return targetNode;\n  };\n  let convertBase64ToDownloadableLink = function (b64, filename, targetNode, fallbackHTML) {\n    //IE-11 safe version. More verbose than modern fetch()\n    if (window.Blob && window.URL && window.URL.createObjectURL) {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', b64, true);\n      xhr.responseType = 'blob';\n      xhr.onload = function () {\n        if (xhr.status === 200) {\n          var blob = xhr.response;\n          var link = document.createElement('a');\n          link.innerText = \"Download PDF\";\n          link.href = URL.createObjectURL(blob);\n          link.setAttribute('download', filename);\n          targetNode.innerHTML = fallbackHTML.replace(/\\[pdflink\\]/g, link.outerHTML);\n        }\n      };\n      xhr.send();\n    }\n  };\n  let generatePDFObjectMarkup = function (embedType, targetNode, url, pdfOpenFragment, width, height, id, title, omitInlineStyles, customAttribute, PDFJS_URL) {\n    //Ensure target element is empty first\n    emptyNodeContents(targetNode);\n    let source = url;\n    if (embedType === \"pdfjs\") {\n      //If PDFJS_URL already contains a ?, assume querystring is in place, and use an ampersand to append PDFJS's file parameter\n      let connector = PDFJS_URL.indexOf(\"?\") !== -1 ? \"&\" : \"?\";\n      source = PDFJS_URL + connector + \"file=\" + encodeURIComponent(url) + pdfOpenFragment;\n    } else {\n      source += pdfOpenFragment;\n    }\n    let el = document.createElement(\"iframe\");\n    el.className = \"pdfobject\";\n    el.type = \"application/pdf\";\n    el.title = title;\n    el.src = source;\n    el.allow = \"fullscreen\";\n    el.frameborder = \"0\";\n    if (id) {\n      el.id = id;\n    }\n    if (!omitInlineStyles) {\n      let style = \"border: none;\";\n      if (targetNode !== document.body) {\n        //assign width and height to target node\n        style += \"width: \" + width + \"; height: \" + height + \";\";\n      } else {\n        //this is a full-page embed, use CSS to fill the viewport\n        style += \"position: absolute; top: 0; right: 0; bottom: 0; left: 0; width: 100%; height: 100%;\";\n      }\n      el.style.cssText = style;\n    }\n\n    //Allow developer to insert custom attribute on iframe element, but ensure it does not conflict with attributes used by PDFObject\n    let reservedTokens = [\"className\", \"type\", \"title\", \"src\", \"style\", \"id\", \"allow\", \"frameborder\"];\n    if (customAttribute && customAttribute.key && reservedTokens.indexOf(customAttribute.key) === -1) {\n      el.setAttribute(customAttribute.key, typeof customAttribute.value !== \"undefined\" ? customAttribute.value : \"\");\n    }\n    targetNode.classList.add(\"pdfobject-container\");\n    targetNode.appendChild(el);\n    return targetNode.getElementsByTagName(\"iframe\")[0];\n  };\n  let embed = function (url, targetSelector, options) {\n    //If targetSelector is not defined, convert to boolean\n    let selector = targetSelector || false;\n\n    //Ensure options object is not undefined -- enables easier error checking below\n    let opt = options || {};\n\n    //Get passed options, or set reasonable defaults\n    suppressConsole = typeof opt.suppressConsole === \"boolean\" ? opt.suppressConsole : false;\n    let id = typeof opt.id === \"string\" ? opt.id : \"\";\n    let page = opt.page || false;\n    let pdfOpenParams = opt.pdfOpenParams || {};\n    let fallbackLink = typeof opt.fallbackLink === \"string\" || typeof opt.fallbackLink === \"boolean\" ? opt.fallbackLink : true;\n    let width = opt.width || \"100%\";\n    let height = opt.height || \"100%\";\n    let title = opt.title || \"Embedded PDF\";\n    let forcePDFJS = typeof opt.forcePDFJS === \"boolean\" ? opt.forcePDFJS : false;\n    let omitInlineStyles = typeof opt.omitInlineStyles === \"boolean\" ? opt.omitInlineStyles : false;\n    let PDFJS_URL = opt.PDFJS_URL || false;\n    let targetNode = getTargetElement(selector);\n    let pdfOpenFragment = \"\";\n    let customAttribute = opt.customAttribute || {};\n    let fallbackHTML_default = \"<p>This browser does not support inline PDFs. Please download the PDF to view it: [pdflink]</p>\";\n\n    //Ensure URL is available. If not, exit now.\n    if (typeof url !== \"string\") {\n      return embedError(\"URL is not valid\");\n    }\n\n    //If target element is specified but is not valid, exit without doing anything\n    if (!targetNode) {\n      return embedError(\"Target element cannot be determined\");\n    }\n\n    //page option overrides pdfOpenParams, if found\n    if (page) {\n      pdfOpenParams.page = page;\n    }\n\n    //Stringify optional Adobe params for opening document (as fragment identifier)\n    pdfOpenFragment = buildURLFragmentString(pdfOpenParams);\n\n    // --== Do the dance: Embed attempt #1 ==--\n\n    //If the forcePDFJS option is invoked, skip everything else and embed as directed\n    if (forcePDFJS && PDFJS_URL) {\n      return generatePDFObjectMarkup(\"pdfjs\", targetNode, url, pdfOpenFragment, width, height, id, title, omitInlineStyles, customAttribute, PDFJS_URL);\n    }\n\n    // --== Embed attempt #2 ==--\n\n    //Embed PDF if support is detected, or if this is a relatively modern browser \n    if (supportsPDFs) {\n      return generatePDFObjectMarkup(\"iframe\", targetNode, url, pdfOpenFragment, width, height, id, title, omitInlineStyles, customAttribute);\n    }\n\n    // --== Embed attempt #3 ==--\n\n    //If everything else has failed and a PDFJS fallback is provided, try to use it\n    if (PDFJS_URL) {\n      return generatePDFObjectMarkup(\"pdfjs\", targetNode, url, pdfOpenFragment, width, height, id, title, omitInlineStyles, customAttribute, PDFJS_URL);\n    }\n\n    // --== PDF embed not supported! Use fallback ==-- \n\n    //Display the fallback link if available\n    if (fallbackLink) {\n      //If a custom fallback has been provided, handle it now\n      if (typeof fallbackLink === \"string\") {\n        //Ensure [url] is set in custom fallback\n        targetNode.innerHTML = fallbackLink.replace(/\\[url\\]/g, url);\n      } else {\n        //If the PDF is a base64 string, convert it to a downloadable link\n        if (url.indexOf(\"data:application/pdf;base64\") !== -1) {\n          //Asynchronously append the link to the targetNode\n          convertBase64ToDownloadableLink(url, \"file.pdf\", targetNode, fallbackHTML_default);\n        } else {\n          //Use default fallback link\n          let link = \"<a href='\" + url + \"'>Download PDF</a>\";\n          targetNode.innerHTML = fallbackHTML_default.replace(/\\[pdflink\\]/g, link);\n        }\n      }\n    }\n    return embedError(\"This browser does not support embedded PDFs\");\n  };\n  return {\n    embed: function (a, b, c) {\n      return embed(a, b, c);\n    },\n    pdfobjectversion: function () {\n      return pdfobjectversion;\n    }(),\n    supportsPDFs: function () {\n      return supportsPDFs;\n    }()\n  };\n});","map":{"version":3,"names":["root","factory","define","amd","module","exports","PDFObject","window","navigator","undefined","userAgent","pdfobjectversion","win","nav","ua","suppressConsole","isModernBrowser","isChromium","chrome","isSafari","safari","vendor","test","isFirefox","Mozilla","validateAX","type","ax","ActiveXObject","e","hasActiveXPDFPlugin","checkSupport","isSafariIOSDesktopMode","platform","maxTouchPoints","isMobileDevice","supportsPDFVE","pdfViewerEnabled","supportsPDFs","buildURLFragmentString","pdfParams","string","prop","paramArray","fdf","comment","viewrect","highlight","page","embedError","push","encodeURIComponent","hasOwnProperty","join","msg","console","log","emptyNodeContents","node","firstChild","removeChild","getTargetElement","targetSelector","targetNode","document","body","querySelector","jQuery","length","get","nodeType","convertBase64ToDownloadableLink","b64","filename","fallbackHTML","Blob","URL","createObjectURL","xhr","XMLHttpRequest","open","responseType","onload","status","blob","response","link","createElement","innerText","href","setAttribute","innerHTML","replace","outerHTML","send","generatePDFObjectMarkup","embedType","url","pdfOpenFragment","width","height","id","title","omitInlineStyles","customAttribute","PDFJS_URL","source","connector","indexOf","el","className","src","allow","frameborder","style","cssText","reservedTokens","key","value","classList","add","appendChild","getElementsByTagName","embed","options","selector","opt","pdfOpenParams","fallbackLink","forcePDFJS","fallbackHTML_default","a","b","c"],"sources":["C:/Users/rajaa/OneDrive/Desktop/Life/node_modules/pdfobject/pdfobject.js"],"sourcesContent":["/**\n *  PDFObject v2.3.0\n *  https://github.com/pipwerks/PDFObject\n *  @license\n *  Copyright (c) 2008-2024 Philip Hutchison\n *  MIT-style license: http://pipwerks.mit-license.org/\n *  UMD module pattern from https://github.com/umdjs/umd/blob/master/templates/returnExports.js\n */\n\n(function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else if (typeof module === \"object\" && module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.PDFObject = factory();\n  }\n}(this, function () {\n\n    \"use strict\";\n\n    //PDFObject is designed for client-side (browsers), not server-side (node)\n    //Will choke on undefined navigator and window vars when run on server\n    //Return boolean false and exit function when running server-side\n\n    if(typeof window === \"undefined\" || window.navigator === undefined || window.navigator.userAgent === undefined){ return false; }\n\n    let pdfobjectversion = \"2.3.0\";\n    let win = window;\n    let nav = win.navigator;\n    let ua = nav.userAgent;\n    let suppressConsole = false;\n\n    //Fallback validation when navigator.pdfViewerEnabled is not supported\n    let isModernBrowser = function (){\n\n        /*\n           userAgent sniffing is not the ideal path, but most browsers revoked the ability to check navigator.mimeTypes \n           for security purposes. As of 2023, browsers have begun implementing navigator.pdfViewerEnabled, but older versions\n           do not have navigator.pdfViewerEnabled or the ability to check navigator.mimeTypes. We're left with basic browser \n           sniffing and assumptions of PDF support based on browser vendor.\n        */\n\n        //Chromium has provided native PDF support since 2011.\n        //Most modern browsers use Chromium under the hood: Google Chrome, Microsoft Edge, Opera, Brave, Vivaldi, Arc, and more.\n        //Chromium uses the PDFium rendering engine, which is based on Foxit's PDF rendering engine.\n        //Note that MS Edge opts to use a different PDF rendering engine. As of 2024, Edge uses a version of Adobe's Reader\n        let isChromium = (win.chrome !== undefined);\n\n        //Safari on macOS has provided native PDF support since 2009. \n        //This code snippet also detects the DuckDuckGo browser, which uses Safari/Webkit under the hood.\n        let isSafari = (win.safari !== undefined || (nav.vendor !== undefined && /Apple/.test(nav.vendor) && /Safari/.test(ua)));\n\n        //Firefox has provided PDF support via PDFJS since 2013.\n        let isFirefox = (win.Mozilla !== undefined || /irefox/.test(ua));\n\n        return isChromium || isSafari || isFirefox;  \n\n    };\n\n    /*\n       Special handling for Internet Explorer 11.\n       Check for ActiveX support, then whether \"AcroPDF.PDF\" or \"PDF.PdfCtrl\" are valid.\n       IE11 uses ActiveX for Adobe Reader and other PDF plugins, but window.ActiveXObject will evaluate to false. \n       (\"ActiveXObject\" in window) evaluates to true.\n       MS Edge does not support ActiveX so this test will evaluate false for MS Edge.\n    */\n    let validateAX = function (type){\n        var ax = null;\n        try {\n            ax = new ActiveXObject(type);\n        } catch (e) {\n            //ensure ax remains null when ActiveXObject attempt fails\n            ax = null;\n        }\n        return !!ax; //convert resulting object to boolean\n    };\n\n    let hasActiveXPDFPlugin = function (){ return (\"ActiveXObject\" in win) && (validateAX(\"AcroPDF.PDF\") || validateAX(\"PDF.PdfCtrl\")) };\n\n    let checkSupport = function (){\n\n        //Safari on iPadOS doesn't report as 'mobile' when requesting desktop site, yet still fails to embed PDFs\n        let isSafariIOSDesktopMode = (nav.platform !== undefined && nav.platform === \"MacIntel\" && nav.maxTouchPoints !== undefined && nav.maxTouchPoints > 1);\n\n        let isMobileDevice = (isSafariIOSDesktopMode || /Mobi|Tablet|Android|iPad|iPhone/.test(ua));\n\n        //As of June 2023, no mobile browsers properly support inline PDFs. If mobile, just say no.\n        if(isMobileDevice){ return false; }\n        \n        //Modern browsers began supporting navigator.pdfViewerEnabled in late 2022 and early 2023.\n        let supportsPDFVE = (typeof nav.pdfViewerEnabled === \"boolean\");\n\n        //If browser supports nav.pdfViewerEnabled and is explicitly saying PDFs are NOT supported (e.g. PDFJS disabled by user in Firefox), respect it.\n        if(supportsPDFVE && !nav.pdfViewerEnabled){ return false; }\n\n        return (supportsPDFVE && nav.pdfViewerEnabled) || isModernBrowser() || hasActiveXPDFPlugin();\n\n    };\n\n    //Determines whether PDF support is available\n    let supportsPDFs = checkSupport();\n\n    //Create a fragment identifier for using PDF Open parameters when embedding PDF\n    let buildURLFragmentString = function(pdfParams){\n\n        let string = \"\";\n        let prop;\n        let paramArray = [];\n        let fdf = \"\";\n        \n        //The comment, viewrect, and highlight parameters require page to be set first. \n\n        //Check to ensure page is used if comment, viewrect, or highlight are specified\n        if(pdfParams.comment || pdfParams.viewrect || pdfParams.highlight){\n\n            if(!pdfParams.page){\n                \n                //If page is not set, use the first page\n                pdfParams.page = 1;\n                \n                //Inform user that page needs to be set properly\n                embedError(\"The comment, viewrect, and highlight parameters require a page parameter, but none was specified. Defaulting to page 1.\");\n            \n            }\n\n        }\n\n        //Let's go ahead and ensure page is always the first parameter.\n        if(pdfParams.page){\n            paramArray.push(\"page=\" + encodeURIComponent(pdfParams.page));\n            delete pdfParams.page;\n        }\n\n        //FDF needs to be the last parameter in the string\n        if(pdfParams.fdf){\n            fdf = pdfParams.fdf;\n            delete pdfParams.fdf;\n        }\n        \n        //Add all other parameters, as needed\n        if(pdfParams){\n\n            for (prop in pdfParams) {\n                if (pdfParams.hasOwnProperty(prop)) {\n                    paramArray.push(encodeURIComponent(prop) + \"=\" + encodeURIComponent(pdfParams[prop]));\n                }\n            }\n\n            //Add fdf as the last parameter, if needed\n            if(fdf){\n                paramArray.push(\"fdf=\" + encodeURIComponent(fdf));\n            }\n\n            //Join all parameters in the array into a string\n            string = paramArray.join(\"&\");\n\n            //The string will be empty if no PDF Parameters were provided\n            //Only prepend the hash if the string is not empty\n            if(string){\n                string = \"#\" + string;\n            }\n\n        }\n\n        return string;\n\n    };\n\n    let embedError = function (msg){\n        if(!suppressConsole){\n            console.log(\"[PDFObject]\", msg);\n        }\n        return false;\n    };\n\n    let emptyNodeContents = function (node){\n        while(node.firstChild){\n            node.removeChild(node.firstChild);\n        }\n    };\n\n    let getTargetElement = function (targetSelector){\n\n        //Default to body for full-browser PDF\n        let targetNode = document.body;\n\n        //If a targetSelector is specified, check to see whether\n        //it's passing a selector, jQuery object, or an HTML element\n\n        if(typeof targetSelector === \"string\"){\n\n            //Is CSS selector\n            targetNode = document.querySelector(targetSelector);\n\n        } else if (win.jQuery !== undefined && targetSelector instanceof jQuery && targetSelector.length) {\n\n            //Is jQuery element. Extract HTML node\n            targetNode = targetSelector.get(0);\n\n        } else if (targetSelector.nodeType !== undefined && targetSelector.nodeType === 1){\n\n            //Is HTML element\n            targetNode = targetSelector;\n\n        }\n\n        return targetNode;\n\n    };\n\n    let convertBase64ToDownloadableLink = function (b64, filename, targetNode, fallbackHTML) {\n\n        //IE-11 safe version. More verbose than modern fetch()\n        if (window.Blob && window.URL && window.URL.createObjectURL) {\n\n            var xhr = new XMLHttpRequest();\n            xhr.open('GET', b64, true);\n            xhr.responseType = 'blob';\n            xhr.onload = function() {\n\n                if (xhr.status === 200) {\n \n                    var blob = xhr.response;\n                    var link = document.createElement('a');\n                    link.innerText = \"Download PDF\";\n                    link.href = URL.createObjectURL(blob);\n                    link.setAttribute('download', filename);\n                    targetNode.innerHTML = fallbackHTML.replace(/\\[pdflink\\]/g, link.outerHTML);\n\n                }\n\n            };\n\n            xhr.send();\n            \n        }\n\n    };\n\n\n    let generatePDFObjectMarkup = function (embedType, targetNode, url, pdfOpenFragment, width, height, id, title, omitInlineStyles, customAttribute, PDFJS_URL){\n\n        //Ensure target element is empty first\n        emptyNodeContents(targetNode);\n\n        let source = url;\n\n        if(embedType === \"pdfjs\"){ \n            //If PDFJS_URL already contains a ?, assume querystring is in place, and use an ampersand to append PDFJS's file parameter\n            let connector = (PDFJS_URL.indexOf(\"?\") !== -1) ? \"&\" : \"?\"; \n            source = PDFJS_URL + connector + \"file=\" + encodeURIComponent(url) + pdfOpenFragment;\n        } else {\n            source += pdfOpenFragment;\n        }\n\n        let el = document.createElement(\"iframe\");\n        el.className = \"pdfobject\";\n        el.type = \"application/pdf\";\n        el.title = title;\n        el.src = source;\n        el.allow = \"fullscreen\";\n        el.frameborder = \"0\";\n        if(id){ el.id = id; }\n\n        if(!omitInlineStyles){\n\n            let style = \"border: none;\";\n\n            if(targetNode !== document.body){\n                //assign width and height to target node\n                style += \"width: \" + width + \"; height: \" + height + \";\";\n            } else {\n                //this is a full-page embed, use CSS to fill the viewport\n                style += \"position: absolute; top: 0; right: 0; bottom: 0; left: 0; width: 100%; height: 100%;\";\n            }\n\n            el.style.cssText = style; \n\n        }\n\n        //Allow developer to insert custom attribute on iframe element, but ensure it does not conflict with attributes used by PDFObject\n        let reservedTokens = [\"className\", \"type\", \"title\", \"src\", \"style\", \"id\", \"allow\", \"frameborder\"];\n        if(customAttribute && customAttribute.key && reservedTokens.indexOf(customAttribute.key) === -1){\n            el.setAttribute(customAttribute.key, (typeof customAttribute.value !== \"undefined\") ? customAttribute.value : \"\");\n        }\n\n        targetNode.classList.add(\"pdfobject-container\");\n        targetNode.appendChild(el);\n\n        return targetNode.getElementsByTagName(\"iframe\")[0];\n\n    };\n\n    let embed = function(url, targetSelector, options){\n\n        //If targetSelector is not defined, convert to boolean\n        let selector = targetSelector || false;\n\n        //Ensure options object is not undefined -- enables easier error checking below\n        let opt = options || {};\n\n        //Get passed options, or set reasonable defaults\n        suppressConsole = (typeof opt.suppressConsole === \"boolean\") ? opt.suppressConsole : false;\n        let id = (typeof opt.id === \"string\") ? opt.id : \"\";\n        let page = opt.page || false;\n        let pdfOpenParams = opt.pdfOpenParams || {};\n        let fallbackLink = (typeof opt.fallbackLink === \"string\" || typeof opt.fallbackLink === \"boolean\") ? opt.fallbackLink : true;\n        let width = opt.width || \"100%\";\n        let height = opt.height || \"100%\";\n        let title = opt.title || \"Embedded PDF\";\n        let forcePDFJS = (typeof opt.forcePDFJS === \"boolean\") ? opt.forcePDFJS : false;\n        let omitInlineStyles = (typeof opt.omitInlineStyles === \"boolean\") ? opt.omitInlineStyles : false;\n        let PDFJS_URL = opt.PDFJS_URL || false;\n        let targetNode = getTargetElement(selector);\n        let pdfOpenFragment = \"\";\n        let customAttribute = opt.customAttribute || {};\n        let fallbackHTML_default = \"<p>This browser does not support inline PDFs. Please download the PDF to view it: [pdflink]</p>\";\n\n        //Ensure URL is available. If not, exit now.\n        if(typeof url !== \"string\"){ return embedError(\"URL is not valid\"); }\n\n        //If target element is specified but is not valid, exit without doing anything\n        if(!targetNode){ return embedError(\"Target element cannot be determined\"); }\n\n        //page option overrides pdfOpenParams, if found\n        if(page){ pdfOpenParams.page = page; }\n\n        //Stringify optional Adobe params for opening document (as fragment identifier)\n        pdfOpenFragment = buildURLFragmentString(pdfOpenParams);\n\n\n        // --== Do the dance: Embed attempt #1 ==--\n\n        //If the forcePDFJS option is invoked, skip everything else and embed as directed\n        if(forcePDFJS && PDFJS_URL){\n            return generatePDFObjectMarkup(\"pdfjs\", targetNode, url, pdfOpenFragment, width, height, id, title, omitInlineStyles, customAttribute, PDFJS_URL);\n        }\n \n        // --== Embed attempt #2 ==--\n\n        //Embed PDF if support is detected, or if this is a relatively modern browser \n        if(supportsPDFs){\n            return generatePDFObjectMarkup(\"iframe\", targetNode, url, pdfOpenFragment, width, height, id, title, omitInlineStyles, customAttribute);\n        }\n        \n        // --== Embed attempt #3 ==--\n        \n        //If everything else has failed and a PDFJS fallback is provided, try to use it\n        if(PDFJS_URL){\n            return generatePDFObjectMarkup(\"pdfjs\", targetNode, url, pdfOpenFragment, width, height, id, title, omitInlineStyles, customAttribute, PDFJS_URL);\n        }\n        \n        // --== PDF embed not supported! Use fallback ==-- \n\n        //Display the fallback link if available\n        if(fallbackLink){\n\n            //If a custom fallback has been provided, handle it now\n            if(typeof fallbackLink === \"string\"){\n\n                //Ensure [url] is set in custom fallback\n                targetNode.innerHTML = fallbackLink.replace(/\\[url\\]/g, url);\n\n            } else {\n\n                //If the PDF is a base64 string, convert it to a downloadable link\n                if(url.indexOf(\"data:application/pdf;base64\") !== -1){\n\n                    //Asynchronously append the link to the targetNode\n                    convertBase64ToDownloadableLink(url, \"file.pdf\", targetNode, fallbackHTML_default);\n                \n                } else {\n\n                    //Use default fallback link\n                    let link = \"<a href='\" + url + \"'>Download PDF</a>\";\n                    targetNode.innerHTML = fallbackHTML_default.replace(/\\[pdflink\\]/g, link);\n\n                }\n\n            }\n\n        }\n\n        return embedError(\"This browser does not support embedded PDFs\");\n\n    };\n\n    return {\n        embed: function (a,b,c){ return embed(a,b,c); },\n        pdfobjectversion: (function () { return pdfobjectversion; })(),\n        supportsPDFs: (function (){ return supportsPDFs; })()\n    };\n\n}));"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}